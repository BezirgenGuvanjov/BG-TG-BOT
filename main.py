# chinese_bot_advanced.py
import telebot
import schedule
import time
import json
import random
import threading
from datetime import datetime, timedelta
import os

# =========== –ù–ê–°–¢–†–û–ô–ö–ò ===========
TOKEN = "7772224219:AAHf0FnFFIz4aVZQI8tqp7V9U09zjJ029g4"
CHAT_ID = -1003004150175  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à group id
WORDS_FILE = "words.json"
ACTIVITY_FILE = "activity.json"
POLL_INTERVAL_MINUTES = 60    # –æ–ø—Ä–æ—Å—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
GOODNIGHT_HOUR = 22         # 22:00 "–ø–æ—Ä–∞ —Å–ø–∞—Ç—å"
CHECK_AWAKE_MIN_AFTER_22 = 30 # –≤ 22:30 –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ 22:00 (30 –º–∏–Ω—É—Ç)
LEADERBOARD_HOUR_MIN = "21:30" # —Ñ–æ—Ä–º–∞—Ç "HH:MM" –¥–ª—è leaderboard
# =================================

bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞
if not os.path.exists(WORDS_FILE):
    raise SystemExit(f"–§–∞–π–ª {WORDS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ words.json —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.")
with open(WORDS_FILE, "r", encoding="utf-8") as f:
    words = json.load(f)
if not isinstance(words, list) or len(words) < 3:
    raise SystemExit("words.json –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏ chinese,pinyin,meaning (–º–∏–Ω–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏).")

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (persist –≤ activity.json) ---
def load_activity():
    if not os.path.exists(ACTIVITY_FILE):
        return {"users": {}}
    try:
        with open(ACTIVITY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"users": {}}

def save_activity(data):
    with open(ACTIVITY_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏ mention HTML
def display_and_mention(uid, user_rec):
    username = user_rec.get("username")
    first = user_rec.get("first_name", "")
    last = user_rec.get("last_name", "")
    disp = username or (first + (" " + last if last else ""))
    # —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –µ—Å–ª–∏ –µ—Å—Ç—å username ‚Äî –º–æ–∂–Ω–æ @username, –∏–Ω–∞—á–µ tg://user?id
    if username:
        mention = "@" + username
    else:
        mention = f'<a href="tg://user?id={uid}">{first}</a>'
    return disp, mention

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@bot.message_handler(commands=["start"])
def handle_start(message):
    bot.reply_to(message, "üëã –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ª–æ–≤–∞ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–ø—Ä–æ—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π /leaderboard —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö.")

@bot.message_handler(commands=["leaderboard", "top"])
def cmd_leaderboard(message):
    data = load_activity()
    users = data.get("users", {})
    if not users:
        bot.reply_to(message, "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ count
    sorted_users = sorted(users.items(), key=lambda it: it[1].get("count", 0), reverse=True)
    lines = []
    for i, (uid, rec) in enumerate(sorted_users[:10], start=1):
        disp, _ = display_and_mention(uid, rec)
        cnt = rec.get("count", 0)
        lines.append(f"{i}. {disp} ‚Äî {cnt} —Å–æ–æ–±—â–µ–Ω–∏–π")
    text = "üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(lines)
    bot.reply_to(message, text, parse_mode='HTML')

@bot.message_handler(commands=["send_now"])
def cmd_send_now(message):
    send_word_and_quiz()
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–æ–≤–æ –∏ –æ–ø—Ä–æ—Å (—Ç–µ—Å—Ç).")

@bot.message_handler(func=lambda m: True)
def track_activity(message):
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if message.chat is None:
        return
    if message.chat.id != CHAT_ID:
        return
    uid = str(message.from_user.id)
    data = load_activity()
    users = data.setdefault("users", {})
    rec = users.get(uid, {})
    rec["username"] = getattr(message.from_user, "username", None)
    rec["first_name"] = getattr(message.from_user, "first_name", "")
    rec["last_name"] = getattr(message.from_user, "last_name", "")
    rec["last_active"] = datetime.now().isoformat()
    rec["count"] = rec.get("count", 0) + 1
    users[uid] = rec
    save_activity(data)
    # (–Ω–µ –æ—Ç–≤–µ—á–∞–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–æ—Å–∞ / —Å–ª–æ–≤–∞ ---
def get_random_word():
    return random.choice(words)

def send_word_and_quiz():
    word = get_random_word()
    try:
        text = f"üÄÑ –°–ª–æ–≤–æ:\n{word['chinese']} ‚Äî ({word.get('pinyin','')})\n–ó–Ω–∞—á–µ–Ω–∏–µ: {word.get('meaning','')}"
        bot.send_message(CHAT_ID, text, parse_mode='HTML')
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–æ–≤–∞:", e)
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å/quiz
    send_quiz(word)

def send_quiz(word):
    # —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: pinyin, meaning –∏–ª–∏ chinese
    qtype = random.choice(["pinyin", "meaning", "chinese"])
    try:
        if qtype == "pinyin":
            question = f"–ö–∞–∫–æ–π –ø–∏–Ω—å–∏–Ω —É —Å–ª–æ–≤–∞ {word['chinese']}?"
            correct = word.get("pinyin", "")
            pool = [w.get("pinyin","") for w in words if w.get("pinyin","") and w.get("pinyin","") != correct]
        elif qtype == "chinese":
            question = f"–ö–∞–∫–æ–π –∏–µ—Ä–æ–≥–ª–∏—Ñ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—é '{word.get('meaning','')}'?"
            correct = word.get("chinese", "")
            pool = [w.get("chinese","") for w in words if w.get("chinese","") and w.get("chinese","") != correct]
        else:
            question = f"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–≤–æ {word['chinese']} ({word.get('pinyin','')})?"
            correct = word.get("meaning", "")
            pool = [w.get("meaning","") for w in words if w.get("meaning","") and w.get("meaning","") != correct]

        # –Ω–∞–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (3 –≤–∞—Ä–∏–∞–Ω—Ç–∞-–æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ + 1 –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
        options = []
        # –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ pool, —É–º–µ–Ω—å—à–∞–µ–º —á–∏—Å–ª–æ –æ—Ç–≤–ª–µ—á–µ–Ω–∏–π
        k = min(3, len(pool))
        if k > 0:
            distractors = random.sample(pool, k)
            options = distractors + [correct]
        else:
            # –º–∞–ª–æ —Å–ª–æ–≤ ‚Äî –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–∞—Ä—É
            options = [correct]

        # ensure uniqueness
        options = list(dict.fromkeys(options))
        random.shuffle(options)
        correct_id = options.index(correct)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º quiz (–Ω–µ–∞–Ω–æ–Ω–∏–º–Ω—ã–π)
        bot.send_poll(CHAT_ID, question, options, type='quiz', correct_option_id=correct_id, is_anonymous=False)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞:", e)
        # fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–æ–º
        try:
            bot.send_message(CHAT_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")
        except:
            pass

# --- check_who_awake: –≤ 22:30 –æ—Ç–º–µ—á–∞–µ–º —Ç–µ—Ö, –∫—Ç–æ –ø–∏—Å–∞–ª –ø–æ—Å–ª–µ 22:00 ---
def check_who_awake():
    data = load_activity()
    users = data.get("users", {})
    if not users:
        bot.send_message(CHAT_ID, "–ù–∏–∫—Ç–æ –Ω–µ –ø–∏—Å–∞–ª —Å–µ–≥–æ–¥–Ω—è.")
        return

    now = datetime.now()
    # –Ω–∞—á–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö 22:00
    today_22 = now.replace(hour=GOODNIGHT_HOUR, minute=0, second=0, microsecond=0)
    # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –¥–æ 22:30, –±–µ—Ä–µ–º last 30 –º–∏–Ω—É—Ç –∏–Ω–∞—á–µ ‚Äî —Å–º–æ—Ç—Ä–∏–º –ø–æ—Å–ª–µ 22:00
    # –Ω–æ –ø–æ –∑–∞–¥–∞–Ω–∏—é: –≤ 22:30 –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –ø–∏—Å–∞–ª –ø–æ—Å–ª–µ 22:00
    awake = []
    for uid, rec in users.items():
        last = rec.get("last_active")
        if not last:
            continue
        try:
            t = datetime.fromisoformat(last)
        except Exception:
            continue
        if t >= today_22:
            disp, mention = display_and_mention(uid, rec)
            awake.append((uid, disp, mention, t))

    if not awake:
        bot.send_message(CHAT_ID, "üò¥ –í—Å–µ —Å–ø—è—Ç ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –ø–∏—Å–∞–ª –ø–æ—Å–ª–µ 22:00.")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π + —Ç–µ–∫—Å—Ç
    mentions = " ".join(a[2] for a in awake)
    msg = f"üòè {mentions} ‚Äî —ç—Ö, –∫—Ç–æ –Ω–µ —Å–ø–∏—Ç? –ó–∞—á–µ–º –Ω–µ —Å–ø–∏–º?"
    try:
        bot.send_message(CHAT_ID, msg, parse_mode='HTML')
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ check_who_awake:", e)

# --- leaderboard (—Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö) ---
def send_leaderboard():
    data = load_activity()
    users = data.get("users", {})
    if not users:
        bot.send_message(CHAT_ID, "–ù–∏–∫—Ç–æ –Ω–µ –ø–∏—Å–∞–ª –ø–æ–∫–∞, —Ç–æ–ø –ø—É—Å—Ç.")
        return
    sorted_users = sorted(users.items(), key=lambda it: it[1].get("count", 0), reverse=True)
    lines = []
    for i, (uid, rec) in enumerate(sorted_users[:10], start=1):
        disp, mention = display_and_mention(uid, rec)
        cnt = rec.get("count", 0)
        lines.append(f"{i}. {mention} ‚Äî {cnt} —Å–æ–æ–±—â–µ–Ω–∏–π")
    text = "üèÜ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n" + "\n".join(lines)
    try:
        bot.send_message(CHAT_ID, text, parse_mode='HTML')
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ leaderboard:", e)

# ========== –ó–∞–ø—É—Å–∫ polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ & —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ==========
def start_polling_thread():
    # –∑–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å schedule loop
    polling_thread = threading.Thread(target=bot.infinity_polling, kwargs={"timeout": 60})
    polling_thread.daemon = True
    polling_thread.start()

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
schedule.every(POLL_INTERVAL_MINUTES).minutes.do(send_word_and_quiz)
# "–ø–æ—Ä–∞ —Å–ø–∞—Ç—å" –≤ 22:00
schedule.every().day.at(f"{GOODNIGHT_HOUR:02d}:00").do(lambda: bot.send_message(CHAT_ID, "üåô –£–∂–µ 22:00 ‚Äî –ø–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å!"))
# –≤ 22:30 ‚Äî check who awake (—Ç–µ, –∫—Ç–æ –ø–∏—Å–∞–ª –ø–æ—Å–ª–µ 22:00)
# –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç—Ä–æ–∫—É "22:30"
schedule.every().day.at(f"{GOODNIGHT_HOUR:02d}:30").do(check_who_awake)
# leaderboard –≤ 21:30 (LEADERBOARD_HOUR_MIN –º–æ–∂–µ—Ç –±—ã—Ç—å "21:30")
schedule.every().day.at(LEADERBOARD_HOUR_MIN).do(send_leaderboard)

if __name__ == "__main__":
    print("–°—Ç–∞—Ä—Ç—É—é –±–æ—Ç–∞...")
    # —Å—Ç–∞—Ä—Ç—É–µ–º polling
    start_polling_thread()
    # –æ–ø–æ–≤–µ—Å—Ç–∏–º –≥—Ä—É–ø–ø—É, —á—Ç–æ –±–æ—Ç –≤–∫–ª—é—á–∏–ª—Å—è (–ø–æ–ø—Ä–æ–±—É–µ–º, –Ω–æ –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω CHAT_ID)
    try:
        bot.send_message(CHAT_ID, "‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω –∏ —Å–ª—É—à–∞–µ—Ç —á–∞—Ç. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏ /leaderboard", parse_mode='HTML')
    except Exception as e:
        print("–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ CHAT_ID –∏ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞:", e)

    # –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    while True:
        try:
            schedule.run_pending()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ schedule:", e)
        time.sleep(1)
